// Generated file, do not modify manually!

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	brokernetes_v1 "github.com/nilebox/brokernetes/pkg/apis/brokernetes/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeOSBInstances implements OSBInstanceInterface
type FakeOSBInstances struct {
	Fake *FakeBrokernetesV1
	ns   string
}

var osbinstancesResource = schema.GroupVersionResource{Group: "brokernetes", Version: "v1", Resource: "osbinstances"}

var osbinstancesKind = schema.GroupVersionKind{Group: "brokernetes", Version: "v1", Kind: "OSBInstance"}

// Get takes name of the oSBInstance, and returns the corresponding oSBInstance object, and an error if there is any.
func (c *FakeOSBInstances) Get(name string, options v1.GetOptions) (result *brokernetes_v1.OSBInstance, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(osbinstancesResource, c.ns, name), &brokernetes_v1.OSBInstance{})

	if obj == nil {
		return nil, err
	}
	return obj.(*brokernetes_v1.OSBInstance), err
}

// List takes label and field selectors, and returns the list of OSBInstances that match those selectors.
func (c *FakeOSBInstances) List(opts v1.ListOptions) (result *brokernetes_v1.OSBInstanceList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(osbinstancesResource, osbinstancesKind, c.ns, opts), &brokernetes_v1.OSBInstanceList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &brokernetes_v1.OSBInstanceList{}
	for _, item := range obj.(*brokernetes_v1.OSBInstanceList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested oSBInstances.
func (c *FakeOSBInstances) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(osbinstancesResource, c.ns, opts))

}

// Create takes the representation of a oSBInstance and creates it.  Returns the server's representation of the oSBInstance, and an error, if there is any.
func (c *FakeOSBInstances) Create(oSBInstance *brokernetes_v1.OSBInstance) (result *brokernetes_v1.OSBInstance, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(osbinstancesResource, c.ns, oSBInstance), &brokernetes_v1.OSBInstance{})

	if obj == nil {
		return nil, err
	}
	return obj.(*brokernetes_v1.OSBInstance), err
}

// Update takes the representation of a oSBInstance and updates it. Returns the server's representation of the oSBInstance, and an error, if there is any.
func (c *FakeOSBInstances) Update(oSBInstance *brokernetes_v1.OSBInstance) (result *brokernetes_v1.OSBInstance, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(osbinstancesResource, c.ns, oSBInstance), &brokernetes_v1.OSBInstance{})

	if obj == nil {
		return nil, err
	}
	return obj.(*brokernetes_v1.OSBInstance), err
}

// Delete takes name of the oSBInstance and deletes it. Returns an error if one occurs.
func (c *FakeOSBInstances) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(osbinstancesResource, c.ns, name), &brokernetes_v1.OSBInstance{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeOSBInstances) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(osbinstancesResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &brokernetes_v1.OSBInstanceList{})
	return err
}

// Patch applies the patch and returns the patched oSBInstance.
func (c *FakeOSBInstances) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *brokernetes_v1.OSBInstance, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(osbinstancesResource, c.ns, name, data, subresources...), &brokernetes_v1.OSBInstance{})

	if obj == nil {
		return nil, err
	}
	return obj.(*brokernetes_v1.OSBInstance), err
}
